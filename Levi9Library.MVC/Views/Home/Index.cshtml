@using PagedList.Mvc
@using Levi9Library.MVC.Models
@model MainViewModel
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
	Layout = "~/Views/Shared/_Layout.cshtml";
	ViewBag.Title = "Home Page";
}


<h3 class="score-display">Your score: @Model.UserScore</h3>

<br />
<br />

@using (Html.BeginForm())
{
	<p>
		@Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { placeholder = "Search by Author or Title" })
		<input type="submit" value="Search" /></p>
}

<br />
<br />

<h3>Books available for lending</h3>
<br />

@if (TempData["AlreadyBorrowed"] != null)
{
	<div class="alert alert-danger alert-dismissable">
		<a href="#" class="close" data-dismiss="alert" aria-label="close">×</a>
		@TempData["AlreadyBorrowed"].ToString()
	</div>

	<br/>
}

@if (TempData["Success"] != null)
{
	<div class="alert alert-success alert-dismissable">
		<a href="#" class="close" data-dismiss="alert" aria-label="close">×</a>
		@TempData["Success"].ToString()
	</div>

	<br />
}


<table id="availableBooks" class="table table-hover">
	<thead>
	<tr>
		<th>
			@Html.ActionLink("Author", "Index", new { sortOrder = ViewBag.AuthorSort, currentFilter = ViewBag.CurrentFilter })
		</th>
		<th>
			@Html.ActionLink("Title", "Index", new { sortOrder = ViewBag.TitleSort, currentFilter = ViewBag.CurrentFilter })
		</th>
		<th>
			@Html.ActionLink("Book Score", "Index", new { sortOrder = ViewBag.BookScoreSort, currentFilter = ViewBag.CurrentFilter })
		</th>
		<th>@*Borrow*@</th>
	</tr>
	</thead>
	@foreach (var book in Model.AvailableBooks)
	{
		<tr>
			<td>
				@Html.DisplayFor(modelItem => book.Author)
			</td>
			<td>
				@Html.DisplayFor(modelItem => book.Title)
			</td>
			<td>
				@Html.DisplayFor(modelItem => book.BookScore)
			</td>
			@if(book.Stock > 0)
			{
				<td>
					@Html.ActionLink("Borrow", "Borrow", new {bookId = book.BookId})
				</td>
			}
			else
			{
				<td>Not available</td>
			}
		</tr>
	}
</table>

<br />

Page @(Model.AvailableBooks.PageCount < Model.AvailableBooks.PageNumber ? 0 : Model.AvailableBooks.PageNumber) of @Model.AvailableBooks.PageCount

@Html.PagedListPager(Model.AvailableBooks, page => Url.Action("Index",
	new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))